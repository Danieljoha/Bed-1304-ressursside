---
title: '[< Forrige](7.1%20-%20matplotlib.ipynb)     |     [Neste >](8%20-%20sympy.ipynb)'
jupyter: python3
---



<span style="color:#9bb1d4;font-size:30px;font-weight:900"> 7.2 - SeaBorn </span>  

# Introduksjon til Seaborn

Seaborn er et kraftig Python-bibliotek for visualiseringer bygget på toppen av Matplotlib. Det er spesielt designet for å håndtere statistiske grafer og integrerer godt med `Pandas` og `Numpy`, som gjør det enklere å lage komplekse visualiseringer med få linjer kode.

## Hvorfor bruke Seaborn?
- **Forenkler komplekse visualiseringer**: Seaborn tilbyr enkle måter å lage statistiske visualiseringer som scatter plots, heatmaps, linjeplott og boxplots.
- **Bra for statistisk analyse**: Det gir innebygde metoder for regresjonsanalyse og plotting av distribusjoner, som gjør det svært nyttig for datavitenskap.
- **Estetisk tiltalende**: Grafene som Seaborn produserer er ofte mer stilige og estetisk tilfredsstillende, sammenlignet med de som lages med `matplotlib`.
- **Integrasjon med Pandas**: Seaborn fungerer sømløst med Pandas DataFrames, noe som gjør det enkelt å plotte data direkte fra databehandlingen.

## Hva kan Seaborn brukes til?
Seaborn brukes for mange ulike typer visualiseringer, inkludert:
- **Scatter plots** (for å vise forhold mellom to variabler)
- **Bar plots** (for å vise sammenligninger mellom kategorier)
- **Heatmaps** (for å vise korrelasjoner mellom variabler)
- **Box plots** (for å visualisere fordeling og uteliggere)

### Installasjon
Hvis du ikke allerede har Seaborn installert, kan du gjøre det slik:

```python
    # Installerer seaborn ved hjelp av "!pip"-metoden
    !pip install seaborn
```

## **Eksempler med Seaborn**
Nedenfor vil vi se på noen grunnleggende eksempler på hvordan du kan bruke Seaborn for å visualisere dataene dine.

### Eksempel 1
**Scatter plot**: Vi bruker Seaborn sin `scatterplot`-funksjon for å vise forholdet mellom to numeriske variabler: `'BNP_per_capita'` og `'Utdanning'`.

```{python}
# Importer nødvendige biblioteker
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Last inn datasett om skolegang og BNP - schooling-gdp.csv
# Her trenger dere deres path!
df = pd.read_csv('data/schooling-gdp.csv')

# Se på de første radene i datasettet
print(df.head())

# Grunnleggende Seaborn-plots
# 1. Scatter plot (viser sammenhengen mellom 'GDP per capita' og 'Average years of schooling')

plt.figure(figsize=(10, 6))
sns.scatterplot(x='BNP_per_capita', y='Utdanning', data=df)
plt.title('Scatterplot av BNP per capita vs gj.snittlig skolegang')
plt.show()
```

## Eksempel 2: 
**Bar plot** (viser gjennomsnittlig GDP per capita gruppert etter land)

```{python}
plt.figure(figsize=(12, 8))
sns.barplot(x='Land', y='BNP_per_capita', data=df)
plt.xticks(rotation=90)
plt.title('Gjennomsnittling BNP per capita per land')
plt.show()
```

## Eksempel 3 - Heatmap (for å vise korrelasjon mellom numeriske variabler)
Seaborn gjør at vi kan bruke noe som heter 'heatmap' for å se hvor *korrelert* numeriske variabler er.

```{python}
import numpy as np 

# Filtrere ut kun numeriske kolonner
df_numeric = df.select_dtypes(include=[np.number])

# Plotter correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df_numeric.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()
```

### Forklaring av Heatmap:

1. **Korrelasjon:**
   Et korrelasjonsheatmap viser sammenhengen mellom numeriske variabler i datasettet ditt. Korrelasjon måler hvor sterkt to variabler henger sammen, og verdiene spenner fra -1 til 1:
   
   - **1:** Perfekt positiv korrelasjon (når en variabel øker, øker også den andre).
   - **0:** Ingen korrelasjon (ingen lineær sammenheng mellom variablene).
   - **-1:** Perfekt negativ korrelasjon (når en variabel øker, synker den andre).

2. **Heatmap-fargene:**
   Fargene i heatmap'et representerer korrelasjonsverdiene:
   
   - **Blå områder:** Indikerer en positiv korrelasjon (jo mørkere blå, jo sterkere positiv korrelasjon).
   - **Hvite områder:** Indikerer korrelasjoner nær null, altså liten eller ingen lineær sammenheng mellom variablene.
   - **Røde områder:** Indikerer en negativ korrelasjon (mørkere rødfarge betyr sterkere negativ korrelasjon).

3. **Diagonal:**
   På diagonalen i heatmap’et vil du se verdien 1 fordi hver variabel er *perfekt korrelert* med seg selv.

### Hvordan tolke heatmap’et:
- **Styrken på sammenhengen:** Du ser på hvor nær korrelasjonen er 1 (positiv sammenheng) eller -1 (negativ sammenheng).
- **Mønster:** Du kan identifisere grupper av variabler som er sterkt korrelert med hverandre, noe som kan være nyttig i analysen. For eksempel, hvis flere variabler er sterkt korrelert, kan det indikere at de påvirkes av lignende faktorer.

### Eksempel:
Hvis du har et datasett med variabler som `BNP_per_capita`, `Utdanning`, og `Befolkning`, kan heatmap’et over vise at høyere utdanningsnivå er knyttet til høyere BNP per innbygger. Det ser vi fordi `BNP_per_capita` og `Utdanning` har en korrelasjon på **$0.72$**, noe som betyr det at disse to variablene har en sterk positiv lineær sammenheng. Sagt med andre ord, *utdanning er viktig for et land sin BNP*.

# **La oss se på et annet datasett**

## Eksempel 4 - Seaborn eksempeldatasett 
Her laster vi inn et eksempeldatasett, kalt **tips**, som ligger *inne i* biblioteket SeaBorn. 

```{python}
import seaborn as sns
import matplotlib.pyplot as plt

# Bruker Seaborn sitt innebygde 'tips'-datasett
df = sns.load_dataset('tips')
df.head()
```

```{python}
df.shape
```

```{python}
df.info()
```

```{python}
# Scatter plot med totalregning mot tips
plt.figure(figsize=(8, 6))
sns.scatterplot(x='total_bill', y='tip', data=df, hue='smoker', style='time', size='size')
plt.title('Scatterplot: Total Bill vs Tip')
plt.show()
```

**Forklaring**:

* ```hue='smoker'```: Farger punktene basert på om kunden røyker eller ikke.
* ```style='time'```: Punktene er forskjellige avhengig av om det er lunsj eller middag.
* ```size='size'```: Størrelsen på punktene varierer basert på hvor stor gruppen er.

## Eksempel 5 - Bar plot for sammenligning av kategoriske variabler

```{python}
# Bar plot som viser gjennomsnittlig tips per dag
plt.figure(figsize=(8, 6))
sns.barplot(x='day', y='tip', data=df, estimator=sum, ci=None)
plt.title('Total Tips per Day')
plt.show()
```

**Forklaring**:

* ```estimator=sum```: Summerer tips for hver dag.
* Bar plot viser hvordan total tips varierer avhengig av dagen i uken.

## Eksempel 6 - Boxplot 
Boxplots er nyttig for å visualisere fordelingen av data og finne outliers.

```{python}
# Box plot som viser fordelingen av totalregning basert på kjønn
plt.figure(figsize=(8, 6))
sns.boxplot(x='sex', y='total_bill', data=df)
plt.title('Boxplot of Total Bill by Gender')
plt.show()
```

#### **Forklaring av boxplot**:
* Her har vi et boxplot som viser median, kvartiler og potensieller outliers for hver gruppe (her 'male' og 'female').
* Det vi ser at median-tips'et er høyere for menn enn damer.

##### **Detaljert forklaring**:
* Median (den horisontale streken inni boksen)
    - Viser midtpunktet i datasettet (den **50. percentilen**).

* Boksen (Q1 til Q3, interkvartilområdet - IQR)
    - Nedre del av boksen = **25. percentilen** (Q1)
    - Øvre del av boksen = **75. percentilen** (Q3)
    - Bredden på boksen (IQR) = Q3 - Q1 (viser variasjon i midtre 50 % av dataene).

* "Whiskers" (de vertikale linjene som strekker seg ut fra boksen)
    - Viser data innenfor **1.5 x IQR** fra Q1 og Q3.
    - Viser spennet til dataene, ekskludert ekstreme verdier.

* "*Outliers*" (prikker utenfor whiskers)
    - Verdier som er mer enn 1.5 * IQR unna fra boksen.
    - Vises ofte som små sirkler eller prikker.

## Eksempel 7 - Pair plot
Pair plot er en flott måte å få overblikk over hvordan variabler i et datasett henger sammen. 

Ligner på ggplot til R.

```{python}
# Pair plot for å se sammenhengen mellom flere variabler
sns.pairplot(df, hue='sex')
plt.show()
```

**Forklaring**:
* ```hue = 'sex'```: Fargekoding basert på kjønn.
* Plottet viser scatterplots mellom alle numeriske variabler samt fordelingen for hver variabel på diagonalen (```total_bill```, ```tip```, ```size```)

## Eksempel 8 - Histogram

```{python}
# Histogram som viser fordelingen av tips
plt.figure(figsize=(8, 6))
sns.histplot(df['tip'])
plt.title('Histogram of Tips')
plt.show()
```

Her lager vi et histogram ved hjelp av Seaborn.

### Hvorfor bruke Seaborn?

- **Forbedret estetikk**: Seaborn bygger på Matplotlib og gir estetisk tiltalende (standard) visualiseringer.
  
- **Enkel integrasjon med Pandas**: Seaborn fungerer sømløst med Pandas og DataFrames, noe som gjør det enkelt å visualisere store datasett.
  
- **Håndtering av statistiske aggregasjoner**: Mange av Seaborn's plott gjør det enkelt å vise statistiske aggregasjoner som middelverdier og konfidensintervaller.
  
- **Variabel visualisering**: Seaborn gir flere muligheter for visualisering av flere dimensjoner i data, f.eks. ved bruk av `hue`, `style`, `size` og `palette`.

Dette gir deg en rekke nyttige og fleksible verktøy for å utforske og visualisere data i Jupyter Notebook.

# Oppgaver
Her vil det komme en rekke oppgaver som krever Seaborn, og elementer fra tidligere i kurset.

## Oppgave 1 - Enkel visualisering med Seaborn

Lag en funksjon som tar inn en liste med tall og plotter et histogram ved hjelp av Seaborn. Sammenlign med Matplotlib.

Dere kan generere eksempeldata med følgende kode:
```python
    # Eksempeldata
    import numpy as np

    # Genererer 1000 tilfeldig normalfordelte tall
    data = np.random.normal(size=1000)
```

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

```

## Oppgave 2 - Heatmap

Bruk datasettet `schooling-gdp.csv` til å lage et heatmap med **kun** `BNP_per_capita` og `Utdanning` som variabler.

Hva ser vi her? Forklar med egne ord.

```{python}
# Her trenger dere deres path til datasettet!!!
df = pd.read_csv('/data/schooling-gdp.csv')
df.head()
```


## Oppgave 3 - `flights` datasett til SeaBorn
Nå skal dere bruke `flights` datasettet til SeaBorn. Det kan dere laste inn ved å kjøre:

```python
import seaborn as sns
import matplotlib.pyplot as plt

# Last inn flights-datasettet
flights = sns.load_dataset("flights")
```

Datasettet viser antall flypassasjerer per måned fra 1949 til 1960.

### Oppgave 3a – Utvikling i passasjertall over tid 📈
Bruk SeaBorn og MatPlotLib til å lage et lineplot, for å se på utvikling av passasjertall over tid.

Plottet skal vise `year` på x-aksen, og `passengers` på y-aksen.

```{python}
flights = sns.load_dataset('flights')

flights.head()
```

```{python}
# Lineplot kode under her:
```

### Oppgave 3b – Passasjertall per måned og år
Lag en heatmap som viser passasjertall per måned og år.

Tips, kjør denne før du bruker `sns.heatmap()` funksjonen:

```python
# Pivot tabellen for heatmap
flights_pivot = flights.pivot(index="month", columns="year", values="passengers")
```

Hva kan vi få ut av dette plottet?

```{python}
# Pivot tabellen for heatmap
flights_pivot = flights.pivot(index="month", columns="year", values="passengers")

# Heatmap kode under her
```

### Oppgave 3c - Gjennomsnittlig antall passasjerer per måned
Lag et barplot som viser gjennomsnittlig antall passasjerer per måned.

Tips:

```python
sns.barplot(data=flights, x="month", y="passengers", estimator=sum, ci=None, order=[
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
```

```{python}
# Barplot kode under her
```

### Oppgave 3d - Lineær sammenheng mellom år og passasjertall
Lag en **regplot** for å se om det er en lineær trend mellom år og passasjertall.

Denne oppgaven er litt utenfor pensum, men synliggjør hvor mye man kan gjøre med SeaBorn. 

Prøv å kjør koden under:
```python
    # Last inn flights-datasettet
    flights = sns.load_dataset("flights")

    # Aggregere data etter år, ekskluder ikke-numeriske kolonner
    flights_yearly = flights.groupby("year", as_index=False).sum(numeric_only=True)

    # Regresjonsplott
    plt.figure(figsize=(10,5))
    sns.regplot(x="year", y="passengers", data=flights_yearly)
    plt.title("Utvikling i antall passasjerer per år")
    plt.show()
```

### **Hva ser vi her? Hva er trenden?**


##### [< Forrige](7.1%20-%20matplotlib.ipynb)     |     [Neste >](8%20-%20sympy.ipynb)

