---
title: '[< Forrige](4%20-%20lister_oppslag_numpy.ipynb)     |     [Neste >](6%20-%20Logikk_løkker.ipynb)'
jupyter: python3
---



<span style="color:#9bb1d4;font-size:30px;font-weight:900"> 5 - Pandas og databehandling </span>  

# **Pandas** - et verktøy for behandling og lasting av data
I denne delen skal vi utforske hvordan du kan bruke Pandas til å håndtere og modifisere data. Vi skal også gå gjennom grunnleggende databehandling, filtrering, aggregering og visualisering.

# 1. Introduksjon til Pandas
Pandas er et kraftig verktøy for datahåndtering og analyse. Det gir deg muligheten til å arbeide med datasett som er representert som DataFrames, en struktur som ligner regneark som dere kanskje kjenner fra Excel.

Men først, som alle pakker i Python, må vi laste den inn først.

Først, hvis vi ikke har gjort det, bruker vi ```pip install``` for å laste ned pandas. Det kan gjøres ved å skrive følgende:

```python
        # Laster ned pandas med pip
        !pip install pandas
```

Så må vi importere modulen, at vi "henter" den klar for bruk, ved å kjøre cellen under: 

```{python}
import pandas as pd
```

## **Eksempel: Importere Pandas og laste inn en CSV-fil**
Det gjør vi ved å skrive følgende:

```python
        # Laste inn en CSV-fil som et DataFrame
        data = pd.read_csv('data/eksempel_data.csv')

        # Vise de første radene i DataFrame
        data.head()
```

MEN! Her er det viktig å huske på at *'data/eksempel_data.csv'* må være *banenavn* til filen du ønsker å lese. Den er altså unik for din PC/MAC.

**OBS!** En del Windows brukere må skrive en `r` (som står for *read*) foran `'data/eksempel_data.csv'`, altså slik `data = pd.read_csv(r'data/eksempel_data.csv')`, så prøv det om du får feilmelding.

```{python}
# Laste inn en CSV-fil som et DataFrame
data = pd.read_csv('/Users/maaas6121/Library/CloudStorage/OneDrive-UiTOffice365/Skrivebord/Bachelor_Emner/SOK-1003/H25_NyttKurs/data/schooling-gdp.csv')

### OBS: FÅR DU FEILMEDLING OVER, SJEKK AT FILBANEN ER RIKTIG TIL DIN MAC/PC!!! ###

# Vise de første radene i DataFrame
data.head()
```

Vi ser at vi har fire variabler: `Land`, `Landkode`, `BNP_per_capita` (BNP per innbygger), `Utdanning` og `Befolkning`. BNP er "brutto nasjonalprodukt" som måler hvor mye som produseres i et land i løpet av et år. `BNP_per_capita` viser altså hvor mye hver person i landet produserer hvert år i gjennomsnitt.  

Import av data til `pandas` gjøres enkelt med funksjonen `read_csv`. Dersom du har lastet ned siste versjon av notebooks, ligger den en fil i mappen "data" som heter schooling-gdp.csv. (kilde: [Our World In Data](https://ourworldindata.org/grapher/correlation-between-mean-years-of-schooling-and-gdp-per-capita)). Denne filen inneholder data om BNP (bruttonasjonalprodukt) og utdanningsnivå for ulike land i 2010.

## **Operasjoner på dataframe's**
Vi antar at vi har kalt *dataframen* (norsk: *dataramme*) for ```data``` (som over). 

Her er en liste av operasjoner vi kan gjøre for å inspisere, endre og bli kjent med data'en vår ved hjelp av Pandas. Denne kan være et fint oppslagsverk for hva dere kan trenge om Pandas. Dokumentasjon om dette finnes også [her](https://pandas.pydata.org/docs/) og over "hele" Google!

| **Operasjon**                          | **Formål**                                                     | **Syntaks i Python**                                |
|----------------------------------------|----------------------------------------------------------------|-----------------------------------------------------|
| Vise kolonneoverskriftene              | Viser navnene på kolonnene i DataFrame                         | `data.columns`                                      |
| Velge en spesifikk kolonne             | Hente data fra en spesifikk kolonne                            | `data['kolonnenavn']`                               |
| Filtrere rader basert på betingelse     | Filtrere data der en betingelse er oppfylt                     | `data[data['Utdanning'] > 10]`                     |
| Sjekke manglende verdier               | Sjekker om det finnes manglende verdier i datasetet            | `data.isnull().sum()`                               |
| Fylle manglende verdier                | Fyller inn manglende verdier med en gitt verdi                 | `data.fillna(0, inplace=True)`                      |
| Beskrivelse av numeriske verdier        | Gir en statistisk oversikt over numeriske kolonner             | `data.describe()`                                  |
| Sortere data (stigende)                | Sorterer data etter en kolonne i stigende rekkefølge            | `data.sort_values('kolonnenavn', ascending=True)`  |
| Se datatyper                           | Viser datatypene til hver kolonne                              | `data.dtypes`                                       |
| Konvertere datatype                    | Endrer datatype for en spesifikk kolonne                       | `data['kolonne'] = data['kolonne'].astype(float)`   |
| Lese fra Excel-fil                     | Leser data fra en Excel-fil                                    | `data = pd.read_excel('filnavn.xlsx')`              |
| Ny kolonne med beregninger             | Oppretter en ny kolonne som er et resultat av beregninger       | `data['new_column'] = data['kolonne1'] / data['kolonne2']` |
| Finne duplikater                       | Sjekker om det finnes dupliserte rader                         | `data.duplicated()`                                 |
| Fjerne duplikater                      | Fjerner dupliserte rader                                       | `data.drop_duplicates(inplace=True)`                |
| Histogram                              | Lager et histogram for en spesifikk kolonne                    | `data['kolonnenavn'].plot(kind='hist')`             |
| Konvertere til datetime                | Konverterer en kolonne til datetime-objekter                   | `data['dato'] = pd.to_datetime(data['dato'])`       |
| Informasjon av datarammen              | Oppsummere hva datarammen er og består av                      | `data.info()`                                       |
| Velger rader med **loc**               | Velge rader basert på etiketter (navn)                         | `data.loc[2, 'Navn']`                               |
| Velger rader med **iloc**              | Velge rader basert på indeksnummer                             | `data.loc[2, 1]`                                    |
| "Merge" to DataFrames                  | Kombinere to DataFrames basert på en felles kolonne            | `df3 = df1.merge(df2, on='ID', how='inner')`        |
| Oppsummerende statistikker             | Gir spesifikke beregninger som gj.snitt, median, maks, osv.       | `data['kolonne'].mean()` eller `data['kolonne'].median()`  |




... og det er mange, mange fler. Det vil dere få testa dere på gjennom oppgavene. Kommer du over et problem du ikke har sett før, prøv å google det. 

Lurer du på noe, så har noen lurt på det samme før deg :-)

## Eksempelbruk av operasjoner på dataframe's
Siden vi allerede har kjørt kodeblokken over, har vi variabelen ```data```, som inneholder dataframe'n med data fra 'schooling-gdp.csv'-filen vår.

```{python}
# 1. Viser kolonneoverskriftene
print(data.columns)
```

Her ser i at vi får navn på alle kolonnene i dataframe'n vår. Nyttig inspeksjon!

```{python}
# 2. Velg en spesifikk kolonne (BNP per capita)
bnp_column = data['BNP_per_capita']
print(bnp_column)
```

Her ser vi verdiene for kolonnen `BNP_per_capita`, vi ser kolonnens `Name`, `Length` (altså hvor mange tall) og 'dtype' (her har vi et flyttall (float)).

```{python}
# 3. Filtrer rader basert på en betingelse (land med utdanning > 10 år)
high_education = data[data['Utdanning'] > 10]
print(high_education)
```

Her får vi listet opp alle landene som har at `Utdanning` er over 10 år.

```{python}
# 4. Sjekke om det finnes noen manglende verdier (også kalt: NAN - Not a Number)
missing_values = data.isnull().sum()
print(missing_values)
```

Denne koden sjekker om det er manglende verdier i datasettet vårt. Her er det '0' i alle kolonnene, som betyr at det er data i alle cellene i dataframe'n, men jobber man med ekte data - trenger det slett ikke være tilfelle.

```{python}
# Alternativt til 4.
data.isna()
data.isna().sum()
```

```{python}
# 5. Fyll manglende verdier (hvis det var noen) med 0
data.fillna(0, inplace=True)
```

Koden over vil fulle inn '0' der det er manglende verdier. Men det kan godt tenkes man burde ta gjennomsnitt, median eller en annen verdi her. Det vil avhenge av datasettet man har.

```{python}
# 6. Beskrivelse av numeriske verdier
description = data.describe()
print(description)
```

Her får vi en beskrivelse av de numeriske verdiene i dataframe'n. 

```{python}
# 7. Sortere data etter BNP per capita (stigende)
sorted_data = data.sort_values('BNP_per_capita', ascending=True)
print(sorted_data)
```

Her har vi sortert data'en i stigende rekkefølge, basert på variablen `BNP_per_capita`. Hadde vi satt ```ascending=False```, ville det være i synkende rekkefølge!

```{python}
# 8. Se datatypene
data_types = data.dtypes
print(data_types)
```

Her ser vi datatypene til kolonnene våre.

```{python}
# 9. Konvertere en kolonne til en annen datatype (Befolkning til float)

data['Befolkning'] = data['Befolkning'].astype(float)
data['Befolkning']
```

Her ser vi at vi gjorde om `Befolkning` fra heltall ('int64') til flyttall ('float64'). 

**OBS:** Men prøv å tenk over hva vi akkurat gjorde - gir det mening å ha `Befolkning` variabelen som flytall (desimaltall)?

```{python}
# 10. Ny kolonne som er en funksjon av andre kolonner (BNP total)
data['BNP_total'] = data['BNP_per_capita'] * data['Befolkning']
print(data)
```

Her lager vi en ny kolonner, som en funksjon av de to andre kolonnene, BNP og Befolkning.

```{python}
# 11. Finne dupliserte rader
duplicates = data.duplicated()
print(duplicates)

# Her summerer vi 'duplicates' - husk at False = 0, True = 1
# så hvis summen er lik '0' - så betyr det at det ikke er duplikater.
print(sum(duplicates))
```

Her leter vi etter duplikater i data'en vår. Her ser alt ut til å være 'False' --> altså, ingen duplikater.

Legg merke til at ```print(duplicates)``` viser 'False' for de første fem, og de siste 5 radene i dataframe'n. Men vanskelig å si noe om de mellom indeks 4 og indeks 101.

Derfor har jeg skrevet ```print(sum(duplicates))```, for vi husker fra tidligere forelesning. Så behandles 'False' som tallet $0$ og 'True' som tallet $1$.

```{python}
# 12. Fjerne duplikater
data.drop_duplicates(inplace=True)
```

Hadde vi hatt duplikater (noe vi ikke har her), hadde vi nå fjernet dem! :-) 

```{python}
# 13. Plot et histogram over utdanningsnivå
data['Utdanning'].plot(kind='hist')
```

Her har vi plottet et histogram ved hjelp av 'Pandas'. Hvor vi ser frekvensen av de ulike utdanningstallene. Vi skal lære mer om plotting senere i kurset, da det er andre bibliotek (matplotlib og seaborn) som egner seg enda bedre for dette.

```{python}
# 14. Bruke .loc for å hente data for et spesifikt land
norway_data = data.loc[data['Land'] == 'Norway']
print(norway_data)
```

```{python}
# 15. Bruke .iloc for å hente rader og kolonner basert på indeks
subset = data.iloc[0:5, 0:3]  # Første 5 rader, første 3 kolonner
print(subset)
```

```{python}
# 16. Oppsummerende statistikk over BNP per innbygger
print("Gjennomsnittlig BNP per innbygger:", data['BNP_per_capita'].mean())
print("Median BNP per innbygger:", data['BNP_per_capita'].median())
print("Høyeste BNP per innbygger:", data['BNP_per_capita'].max())
print("Laveste BNP per innbygger:", data['BNP_per_capita'].min())
```

# **Oppgaver**
Under er det et datasett dere skal lese inn og gjøre en rekke oppgaver. Bruk notatene over, Pandas dokumentasjon og Google som hjelp. Lykke til! :-)

Vi bruker et datasett som dere finner på GitHub under `'/data'` mappen kalt: `'bilparken_ssb.csv'`

## 📊 Oppgave 1
Les inn csv.-filen som en dataframe ved hjelp av Pandas biblioteket.

```{python}
# Oppgave 1

# Laster inn dataframen
df = pd.read_csv('/Users/maaas6121/Library/CloudStorage/OneDrive-UiTOffice365/Skrivebord/Bachelor_Emner/SOK-1003/H25_NyttKurs/data/bilparken_ssb.csv')

df
```

## 📊 Oppgave 2
Skriv en beskrivelse av data'en under her. Bruk kode for å inspisere data'en.

```{python}
df.info()
```

```{python}
df.describe()
```

### **Beskrivelse av dataene her:**
Fra kodeblokkene over ser man at det er $24$ rader, hvor alle er **non-null**. Vi får opp alle kolonne navn, om det er `object`, `int64` (heltall) eller `float64` (flyttall).


### Hva betyr `64` i `int64` og `float64`?

Tallet **64** refererer til **antall bits** som brukes til å lagre verdiene:

- **`int64`**: 64-bit heltall, som kan representere verdier fra $-2^{63}$ til $2^{63} - 1$.
- **`float64`**: 64-bit flyttall, som følger IEEE 754-standarden og gir høy presisjon ($15$-$17$ desimaler).

Dette betyr at hver verdi i disse datatypene bruker **64 bits (8 byte) per element** i minnet.

## 📊 Oppgave 3
Sjekk hvilke datatyper vi har i Dataframe'n

```{python}
# Sjekk datatyper
print(df.dtypes)
```

## 📊 Oppgave 4
Sorter datasettet, ```df``` fra oppgave 1, basert på variabelen "Personbiler vraket mot pant (prosent av bestanden)" - i synkende rekkefølge.

Verifiser at dere fikk dette til.

```{python}
# Sorter DataFrame etter 'Personbiler vraket mot pant'
df = df.sort_values(by='Personbiler vraket mot pant (prosent av bestanden)', ascending=False)
df
```

## 📊 Oppgave 5
Filtrer rader med høyere gjennomsnittsalder ved vraking enn **18 år**.

```{python}
# Filtrer rader der gjennomsnittsalder ved vraking er over 18
filtered_data = df[df['Gjennomsnittsalder ved vraking (år)'] > 18]
filtered_data
```

Her ser vi at flere 'Bilmerker' har forsvunnet fra dataframe'n - som f.eks. Tesla.

## 📊 Oppgave 6
Finn gjennomsnittlig `'Personbilbestand 31. desember'` for alle bilmerkene i datasettet.

```{python}
# Finn gjennomsnittlig bilbestand
average_stock = round(df['Personbilbestand 31. desember'].mean())
print(f'Gjennomsnittlig personbilbestand blant bilmerkene er: {average_stock}')
```

## 📊 Oppgave 7
Finn bilmerket med høyest gjennomsnittsalder ved vraking.

Tips, her kan der fp bruk for funksjonene:
* ```df.loc```
* ```.idxmax()```

Det kan brukes slik:
```python
# Dette gjør at vi kan finne raden hvor høyeste verdien av 'kolonne_av_interesse' er.
df.loc[df['Kolonne_av_interesse'].idxmax()] 
```

```{python}
# Finn bilmerket med høyest gjennomsnittsalder ved vraking
oldest_brand = df.loc[df['Gjennomsnittsalder ved vraking (år)'].idxmax()]
print(oldest_brand)
```

Chevrolet er det bilmerke med høyest gjennomsnittlig vrakealder!

## 📊 Oppgave 8 - Statistisk sentralbyrå
SSB - Statistisk sentralbyrå sitter mye data. Det er også en arbeidsplass med mange samfunnsøkonomer og bedriftsøkonomer.

Uansett, vi har muligheten til å hente data der ifra. Koden under viser hvordan vi henter data fra SSB sitt API. Mer om det kan de interesserte lese [her](https://www.ssb.no/api/pxwebapi/_/attachment/inline/019c05e0-35ad-4757-87a0-ba7fbf4a68e2:397d9112916d85696733b77d376220c4465cb4fb/Api_brukerveiledning.pdf).

```{python}
# hente CSV fra SSB til pandas

# Importerer Python pandas for å kunne lage dataframe
import pandas as pd

# pd.read_csv() henter innholdet fra API-et og legger det i data. 
# De norske datasettene her er semikolonseparert med komma som desimaltegn.
# CSV er ikke UTF-8, så vi må angi parameter encoding for å få æøå riktig. 

data = pd.read_csv("https://data.ssb.no/api/v0/dataset/1066.csv?lang=no", sep=';', decimal=',', encoding = "ISO-8859-1", )
```

## Oppgave 8a
Her i **Oppgave 8a** skal dere kommentere kodelinjene under, og si noe om hva de gjør.

```{python}
type(data)
```

```{python}
data.shape
```

```{python}
data.head()
```

```{python}
# Endrer til datoformat ved først å erstatte M med - . Ikke strengt tatt nødvendig.
data['måned']= pd.to_datetime(data['måned'].str.replace('M', '-'))

data.index = data['måned']

# Legger informasjon om innholdet i dataframe
data.info()
```

```{python}
# Se hva som skjedde med 'måned' kolonnen nå!
data.head()
```

```{python}
# Lage et linjediagram der vi angir x og y aksen med plot i pandas
data.plot(x='måned', y='07129: Varehandelsindeksen, etter næring, måned og statistikkvariabel', figsize=(6, 12), color ='g')

# Alternativ: Trekker ut index (måned) og verdier til en egfen dataframe
data_serie = data['07129: Varehandelsindeksen, etter næring, måned og statistikkvariabel']

# plot med standardverdier
data_serie.plot()
```

## Oppgave 8b
Utforsk et annet datasett fra SSB, ved å kjøre dette:
```python
# hente CSV fra SSB til pandas

# Importerer Python pandas for å kunne lage dataframe
import pandas as pd

# pd.read_csv() henter innholdet fra API-et og legger det i data. 
# De norske datasettene her er semikolonseparert med komma som desimaltegn.
# CSV er ikke UTF-8, så vi må angi parameter encoding for å få æøå riktig. 

ssb = pd.read_csv("https://data.ssb.no/api/v0/dataset/1078.csv?lang=no", sep=';', decimal=',', encoding = "ISO-8859-1", )
ssb
```

Utforsk denne datarammen, og si noe om hva denne dataen er for noe.

```{python}
# hente CSV fra SSB til pandas

# Importerer Python pandas for å kunne lage dataframe
import pandas as pd

# pd.read_csv() henter innholdet fra API-et og legger det i data. 
# De norske datasettene her er semikolonseparert med komma som desimaltegn.
# CSV er ikke UTF-8, så vi må angi parameter encoding for å få æøå riktig. 

ssb = pd.read_csv("https://data.ssb.no/api/v0/dataset/1078.csv?lang=no", sep=';', decimal=',', encoding = "ISO-8859-1", )
ssb
```

## Vi starter med følgende analyse:

Her ser vi på strukturen og innholdet i datarammen.

```{python}
ssb.head()  # Vise de første radene
```

```{python}
ssb.info()  # Vise info om datayper og manglende verdier
```

```{python}
ssb.describe()  # Statistikk over numeriske kolonner
```

## Undersøker unike verdier:

Her ser vi på unike verdier i forskjellige kolonner.

```{python}
ssb['region'].unique()  # Unike regioner
ssb['kjønn'].unique()  # Unike kjønn
ssb['alder'].unique()  # Unike aldergrupper
ssb['år'].unique()  # Unike år
```

## Gruppere og oppsummere data:

Her kan vi gruppere data etter `region` og `kjønn`, og se hvor mange som er i de ulike gruppene.

```{python}
# Denne linjen bruker pandas til å gruppere og aggregere data.
# agg() - brukes for å spesifisere hvordan vi vil kombinere dataene i hver gruppe. Her bruker vi 'sum'
# Så vi får summen av hvert kjønn i de ulike områdene
ssb.groupby(['region', 'kjønn']).agg({'07459: Befolkning, etter region, kjønn, alder, år og statistikkvariabel': 'sum'})
```

## Filtrere spesifikke verdier:

Hvis du vil utforske spesifikke regioner, kjønn eller aldergrupper, kan du filtrere:

```{python}
ssb[ssb['region'] == '3101 Halden']  # Filter for spesifik region
```

```{python}
ssb[ssb['kjønn'] == '2 Kvinner']  # Filter for kvinner
```

```{python}
ssb[ssb['alder'] == 'F20-24 20-24 år']  # Filter for spesifikk aldersgruppe
```

## Visualisering:

Bruk visualiseringer for å få en bedre forståelse av dataene, som for eksempel biblioteket `matplotlib` (som vi ser mer på i forelesning 7.1).

Her kan vi endre på regionen `3101 Halden` til en annen region. Men under her ser vi antall menn og antall kvinner, i Halden 2025. Flott, ikke sant?

```{python}
import matplotlib.pyplot as plt

# Filtrer data for en spesifikk region, f.eks. "3101 Halden"
region_data = ssb[ssb['region'] == '3101 Halden']

# Gruppér etter kjønn og summer befolkningen
gender_data = region_data.groupby('kjønn')['07459: Befolkning, etter region, kjønn, alder, år og statistikkvariabel'].sum()

# Plot
gender_data.plot(kind='bar', color=['blue', 'pink'])  # Farge for menn og kvinner
plt.title('Antall kvinner og menn i 3101 Halden')
plt.xlabel('Kjønn')
plt.ylabel('Befolkning')
plt.xticks(rotation=0)  # Rotere x-aksen hvis nødvendig
plt.show()
```

## 📊 Oppgave 9 - Eurostat

Eurostat er en veldig nyttig kilde til data. De har et stort utvalg av data på europeiske land. De har laget en egen pakke til python som ikke overraskende heter `eurostat`. Denne pakken er heller ikke installert, så dere må kjøre  `!pip install eurostat` først.

For å se hvilke tabeller som er der, henter vi innholdsfortegnelsen (table of contents) med funksjonen `get_toc_df`. Det gir oss en `pandas` dataramme:

#### Laster ned `eurostat` med pip.

```{python}
!pip install eurostat
```

```{python}
#| scrolled: true
import eurostat
toc = eurostat.get_toc_df()
toc
```

Du kan finne hvor mange tabeller det er med `len(toc)`, og det er i skrivende stund er det rundt 8 tusen tabeller. Det blir litt krevende å lete gjennom alle, så vi ønsker derfor å begrense antall tabeller til de som er relevante. Anta at vi ønsker å se på utviklingen i BNP per innbygger for landene som er med i statistikken. Nærmere bestemt, vi ønsker å finne alle tabeller der `'GDP per capita'` er i tittelen. 

BNP per innbygger er hvor mye hver person i landet i gjennomsnitt produserer i løpet av ett år. 

Vi gjør dette ved å lage følgende "list comprehension": `['GDP per capita' in i for i in toc['title']]`. Elementene i denne listen er sant (`True`) dersom 'GDP per capita' er i tittelen, og usant (`false`) om det ikke er i tittelen. 

#### Det gjør vi slik:

```{python}
gdp_in_toc_list = ['GDP per capita' in i for i in toc['title']]
```

Vi kan så velge de elementene hvor betingelsen er sann ved å sette listen inn i en klammeparentes etter innholdsfortegnelsen, `toc[gdp_in_toc_list]`. Kun de elementene i innholdsfortegnelsen der det står sant (`True`) i listen, tas da med.

```{python}
#collecting only the tables where 'GDP per capita' is in the name
toc_gdp = toc[gdp_in_toc_list]
toc_gdp
```

La oss nå se på tabellen `"Real GDP per capita"`, som har kode `'TIPSNA40'`. Da bruker vi funksjonen `get_data_df` med tabellkoden som argument: 


#### Laster inn denne tabellen

```{python}
gdp_data = eurostat.get_data_df('TIPSNA40')
gdp_data
```

## **Oppgave 9a - Jobbe med data**
Du har fått utdelt et datasett `gdp_data` som inneholder BNP per innbygger (GDP per capita) for ulike europeiske land over flere år. Dataene har noen utfordringer, som manglende verdier (NaN) og kolonner som ikke er relevante for analysen.

Målet med oppgaven er å:

* Rydde opp i dataene ved å fjerne unødvendige kolonner og håndtere eventuelle manglende verdier.
* Ekstrahere data kun for Italia (IT), Danmark (DK) og Sverige (SE).
* Transformere dataene slik at årstallene blir kolonner, og vi har et rent format.
* Utføre beskrivende statistikk og visualisere utviklingen i BNP per capita for de tre landene.
* Bruke standard pandas-metoder for å utforske dataene videre.

### **Løsningsforslag**

Vi deler opp løsningen i flere deler:

##  🔄 Del 1: Rens og filtrer data
1. Last inn datasettet i en pandas DataFrame.
2. Fjern unødvendige kolonner (f.eks. `freq`, `unit`, `na_item`).
3. Behold kun rader for Italia (IT), Danmark (DK) og Sverige (SE).
4. Sjekk og håndter eventuelle manglende verdier (`NaN`).

```{python}
import pandas as pd

# Laste inn data (antar at gdp_data er allerede lastet inn som en DataFrame)
df = gdp_data.copy()

# Fjerne unødvendige kolonner
df = df.drop(columns=['freq', 'unit', 'na_item'])

# Filtrer etter Italia (IT), Danmark (DK) og Sverige (SE)
df = df[df['geo\\TIME_PERIOD'].isin(['IT', 'DK', 'SE'])]

# Konverter årstallskolonner til numeriske verdier
df = df.set_index('geo\\TIME_PERIOD')
df = df.apply(pd.to_numeric, errors='coerce')  # Konverterer alle verdier til numeriske

# Fylle ut manglende verdier med forrige års verdi
df = df.fillna(method='ffill', axis=1)

# Vise de første radene etter rensing
df.head()
```

### **Her fyller vi inn GDP fra året før, for de årene som mangler data. Er dette en god metode? Hvorfor/hvorfor ikke?**

## 🔄 Del 2: Transformér data

1. Sett opp DataFrame slik at:
   - `geo\TIME_PERIOD` blir indeks.
   - Årstallene blir kolonnenavn.
   - BNP per capita-verdiene for hvert land forblir i tabellen.
2. Konverter eventuelle verdier som er lagret som `object` til `float`.

```{python}
# Transponere data for enklere håndtering
df_transposed = df.T  # Roter tabellen slik at årstall er rader og land er kolonner

# Vise de første radene etter transformering
df_transposed.head()
```

## 📊 Del 3: Videre analyse av data

1. Beregn beskrivende statistikk for hvert av landene:
   - Gjennomsnitt, median, standardavvik.
   - Maksimum og minimum BNP per capita.
2. Finn ut hvilket år hvert land hadde høyest BNP per capita.

```{python}
# Her finner vi gjennomsnitt og standardavvik. Samt maksimum og minimum BNP per capita.
df_transposed.describe()
```

```{python}
# Her finner vi median for de ulike landene.
print(f'Median GDP for Danmark er {df_transposed['DK'].median()}')
print(f'Median GDP for Italia er {df_transposed['IT'].median()}')
print(f'Median GDP for Sverige er {df_transposed['SE'].median()}')
```

```{python}
# Finner årstallet Danmark har høyest BNP per capita
max_year_dk = df_transposed['DK'].idxmax()

print("År med høyest BNP per capita for Danmark:", max_year_dk)

# Finner årstallet Italia har høyest BNP per capita
max_year_dk = df_transposed['IT'].idxmax()

print("År med høyest BNP per capita for Italia:", max_year_dk)

# Finner årstallet Sverige har høyest BNP per capita
max_year_dk = df_transposed['SE'].idxmax()

print("År med høyest BNP per capita for Sverige:", max_year_dk)
```

##### [< Forrige](4%20-%20lister_oppslag_numpy.ipynb)     |     [Neste >](6%20-%20Logikk_løkker.ipynb)

