---
title: '[< Forrige](5%20-%20Pandas_og_databehandling.ipynb)     |     [Neste >](7.1%20-%20matplotlib.ipynb)'
jupyter: python3
---



<span style="color:#9bb1d4;font-size:30px;font-weight:900"> 6 - Logikk (if/else/for/while) </span>  

# Logikk og betingelser

Noe av det vi gjør oftest når vi programmerer er å teste om en betingelse er sann eller usann. Når testen er utført, kan programmet velge riktig vei å gå i fortsettelsen. Slik testing kalles "logikk". Vi har allerede i innledningen vært inne på variabeltypen som avgjør om en test er sann eller usann, typen `bool`. 

Sann eller usann (`True` og `False`) brukes som oftest sammen med en `if`-betingelse, slik som dette:

#### Eksempel 1:

```{python}
a = False

if a == False:
    print("Hei")
else:
    print("Hå")
```

Eksempelet over ser vi at hvis ```a = False```, så printes teksten 'Hei'. Hvis vi setter ```a = True``` så printes teksten 'Hå'.  

## If/else Statements i Python
```if/else```-setninger i Python brukes til å utføre betinget logikk i programmet. De lar oss ta beslutninger i koden basert på spesifikke betingelser. Dette betyr at programmet kan kjøre ulike blokker med kode avhengig av om en betingelse er sann (```True```) eller usann (```False```).

### Grunnleggende Struktur
Strukturen for en enkel if/else-setning ser slik ut:

```python
        if betingelse:
            # Kode som kjøres hvis betingelsen er sann
        else:
            # Kode som kjøres hvis betingelsen er usann
```

Hvor det er viktig at det brukes kolon (:) og inntrykk!

Vanligvis vil `if`-setningen inneholde en test som ikke er helt åpenbar, og som avhenger av input i en funksjon eller en variabel som er definert et annet sted i koden. Her er et eksempel på det første:

#### Eskempel 2:

```{python}
import numpy as np

def did_I_win(s0,s1):
    if s1>s0:
        return "won!"
    else:
        return "lost" 

PricePaid = 100
StockPriceToday = int(np.random.rand()*200)
print(
    f"Bought for: {PricePaid}\n"
    f"Worth today: {StockPriceToday}\n"
    f"You {did_I_win(PricePaid,StockPriceToday)}"
)
```

## elif-statements
I tillegg kan vi bruke ```elif``` (else if) for å sjekke flere betingelser:

```python
    if betingelse1:
        # Kode som kjøres hvis betingelse1 er sann
    elif betingelse2:
        # Kode som kjøres hvis betingelse2 er sann
    else:
        # Kode som kjøres hvis ingen av betingelsene er sanne
```
Her kan vi legge til "så mange vi vil" av ```elif```-statements. Men bare én ```if``` og én ```else```.

## Betingelser
Betingelsene i ```if```-setninger kan involvere sammenligninger (som ```==```, ```!=```, ```>```, ```<```, ```>=```, ```<=```) og logiske operatorer (```and```, ```or```, ```not```).

## **Eksempel med elif og betingelser**
La oss se for deg at du har en variabel 'alder', og gir den en verdi. Så kan vi bruke ```if/elif/else``` for å si noe om denne alderen.

```{python}
# Eksempelalder
alder = 18

if alder < 18:
    print("Du er et barn.")
elif alder < 65:
    print("Du er en voksen.")
else:
    print("Du er en senior.")

### Det vi egentlig har skrevet over her, gjør er:
# Hvis alder er mindre enn 18 --> print("Du er et barn.")
# Hvis ikke den over, hvis alder er mindre enn 65 --> print("Du er en voksen.")
# Hvis ingen av de over --> print("Du er en senior.")
```

## En liten oversikt av If/Else Statements i Python

| Komponent       | Beskrivelse                                           | Eksempel                        |
|------------------|-----------------------------------------------------|---------------------------------|
| **if**           | Sjekker en betingelse; hvis sann, kjør koden under  | `if x > 10:`                    |
| **else**         | Kjør koden under hvis if-betingelsen er usann     | `else:`                         |
| **elif**        | Sjekker en annen betingelse hvis `if` er usann     | `elif x > 5:`                   |
| **betingelse**   | Uttrykk som evalueres til `True` eller `False`     | `x == 10`, `y < 5`, `z != 0`   |
| **blokk**        | Koden som kjøres hvis betingelsen er oppfylt       | `print("Hello")`               |

```if/else```-setninger er essensielle for å implementere beslutningstaking i programmer. De gir programmene evnen til å håndtere forskjellige situasjoner og tilpasse seg forskjellige innganger. Ved å bruke disse setningene kan vi lage dynamiske og responsive programmer som reagerer på brukerens input eller andre forhold.

### Ofte vil vi teste andre ting!

Ofte vil du ønske å sammenligne ulike datasett, for eksempel to numpy-rekker. Dersom du skal ha en `if`-betingelse, må du imidlertid huske på at for å få ett svar på en sammenligning mellom to numpy-rekker, så må du angi på hvilken måte de skal sammenlignes. I utgangspunktet vil en slik sammenligning bare gi resultatet fra en sammenligning av hvert element i de to rekkene. Resultatet av sammenligningen er altså ikke en bolsk verdi (`bool`) men en ny rekke. En slik sammenligning vil derfor føre til en feil:

#### Eksempel 2:

```{python}
a = np.array([1,2,3])
b = np.array([3,2,1])

print(a>b)
if a>b:
    print('a was bigger than b')
```

I stedet må vi angi hvordan den elementvise sammenligningen skal sammenfattes i et sant/usant-resultat. Vi kan da velge mellom å kreve at alle elementene er sanne med numpyfunksjonen `all()`, eller at minst ett av elementene er sanne med`any()`.

#### Eksempel 3:

```{python}
if np.any(a>b):
    print('There were elements in a where the corresponding element in b was smaller')
    
    
a = np.array([101,102,103])
if np.all(a>b):
    print('All elements in a was bigger than the corresponding element in b')
```

## If/else setninger og lister
Ofte vil du ha bruk for å bruke flere vilkår for testen, der du enten krever at alle må være sanne, eller at det holder at én er sann, eller en kombinasjon. Det oppnår vi med `and` og `or`. 

Et annet nyttig nøkkelord for logiske tester er `in`. Dette brukes på alt fra å finne ut om et objekt er i en liste eller annen datastruktur, til om en delstreng er i en streng. Her er et eksempel som bruker alle disse nøkkelordene i `if` og `elif`-setninger:

#### Eksempel 4:

```{python}
animal='lion'

cats=['lion','tiger','puma','lynx']
mammals=['human','bear','cat','whale','mouse']+cats

if (animal in cats) and (animal in mammals):
    print(f"{animal} is a cat and a mammal")
elif (not animal in cats) and (animal in mammals):
    print(f"{animal} is not a cat, but it is a mammal")
elif (animal in cats) and (not animal in mammals):
    print(f"{animal} is a cat, but not a mammal")   
else:
    print(f"{animal} is neither a cat nor a mammal")
```

Legg merke til `elif` over. De er `if`-setninger som er knyttet til `if`-setningen over. Koden til en `elif`-setning kjøres dersom hverken `if`-setningen eller noen `elif`-setninger over har blitt tilfredsstilt. 

# For-løkker i Python

For-løkker er en viktig del av programmering som lar deg iterere over en sekvens (for eksempel en liste eller et intervall). I økonomi kan for-løkker være nyttige for å beregne totalverdier, avgifter, eller for å analysere datasett.

## Syntaks

```python
for element in sekvens:
    # Kodeblokk som kjøres for hvert element
```

En for-løkke består altså av følgende;

| Komponent    | Beskrivelse                                                     | Eksempel                       |
|--------------|---------------------------------------------------------------|-------------------------------|
| **for**      | Starten av løkken.                                            | `for i in range(10):`        |
| **Element**  | Variabelen som tar verdien til hvert element i sekvensen.    | `i`                           |
| **Sekvens**  | Listen, området, eller annen itererbar datatype.              | `range(10)`, `list`          |
| **Kodeblokk**    | Koden som utføres for hvert element i sekvensen.              | `print(i)`                   |

#### Eksempel 5:

```{python}
# Eksempel 5
for i in range(10):
    print(i)
```

#### Eksempel 6:

```{python}
# Eksempel 6
liste = [1, 2, 4, 8, 100]

for i in liste:
    print(i)
```

### Litt mer avanserte eksempler

#### Eksempel 6 - Beregning av total inntekt
Anta at vi har en liste over månedlig inntekt og vi ønsker å finne den totale inntekten for året.

```{python}
monthly_income = [3000, 3200, 3500, 2800, 3000, 3100, 3300, 3400, 3600, 3700, 3500, 3400]
total_income = 0

for income in monthly_income:
    total_income += income

print("Total inntekt for året:", total_income)
```

### Bruk av `+=` i Python
I Python er `+=` en operator som gjør det lettere å oppdatere verdien av en variabel ved å legge til en annen verdi til den. Dette er en praktisk og effektiv måte å akkumulerer verdier på uten å måtte skrive hele uttrykket.

#### Eksempel 7 - Beregning av gjennomsnittlig inntekt
Du kan også bruke en for-løkke til å beregne gjennomsnittlig inntekt.

```{python}
total_income = 0

for income in monthly_income:
    total_income += income

average_income = total_income / len(monthly_income)
print("Gjennomsnittlig månedlig inntekt:", round(average_income,2 ))
```

#### Eksempel 7 - Beregning av rente på en investering
La oss si at du har en investering som vokser med en fast rente over en periode. Du kan bruke en for-løkke for å beregne verdien av investeringen over tid.

```{python}
initial_investment = 10000  # Startkapital
interest_rate = 0.05        # 5% rente
years = 10                  # Antall år
values = []

for year in range(1, years + 1):
    value = initial_investment * (1 + interest_rate) ** year
    values.append(value)

print("Verdi av investeringen etter år:", values)
```

#### Eksempel 8 - Beregning av skatt på inntekt
Anta at vi har en skattesats, og vi ønsker å beregne skatten for hver måned.

```{python}
tax_rate = 0.35  # 25% skatt
monthly_income = [45000, 47000, 50000, 60000, 80000, 90000]

for income in monthly_income:
    tax = round(income * tax_rate)
    print(f"Skatt for inntekt på {income} kr i måneden: {tax} kr")
```

## Et nyttig tilfelle av for-løkke i databehandling.
La oss ta for oss et datasett, f.eks. det under.

```{python}
import pandas as pd

# Opprettelse av en eksempel DataFrame med frukter
data = {
    'Frukter': ['Eple', 'Banan', 'Appelsin', 'Druer'],
    'Kalorier': [52, 89, 47, 69],
    'Vekt (gram)': [182, 118, 131, 100]
}

df = pd.DataFrame(data)
df
```

## **Iterere over DataFrame**: 
Det er ofte vi kan ha bruk for å iterere over en dataframe. Da kan vi bruke `iterrows()` metoden for å iterere gjennom DataFrame. Denne metoden returnerer både indeksen og raden for hver iterasjon. Da må vi skrive

```python
    for index, row in df.iterrows():
```

### **Eksempel 9 - Tilgang til rader**: 
For hver `row`, får vi tilgang til spesifikke verdier ved å bruke kolonnenavn. I dette tilfellet skriver vi ut navnet på frukten og antall kalorier. Se hvordan i eksempelet under:

```{python}
# Iterer over DataFrame med index og row
for index, row in df.iterrows():
    # Skriv ut fruktnavn og kalorier
    print(f"Frukt: {row['Frukter']}, Kalorier: {row['Kalorier']}")
```

### Oppsummering

I eksempel 9 har vi demonstrert hvordan man bruker `index` og `row` til å iterere gjennom en DataFrame. `index` gir oss muligheten til å referere til hver rad, mens `row` gir oss tilgang til verdiene i den spesifikke raden. Dette er en effektiv måte å håndtere data på når man arbeider med Pandas i Python.

# Bruk av `while`-løkker i Python

`while`-løkker er en type løkke som fortsetter å kjøre så lenge en spesifisert betingelse er sann. De er nyttige når vi ikke vet på forhånd hvor mange ganger vi må gjenta en blokk med kode, men vi har en betingelse som styrer hvor lenge løkken skal kjøre.

## Eksempel 10 - bruk av `while`-løkke

La oss se på et enkelt eksempel som demonstrerer bruken av `while`-løkker. Anta at vi vil oppsummere inntektene våre månedlig inntil vi når en total inntekt som er større enn eller lik 30000.

```{python}
monthly_income = [3000, 3200, 3500, 2800, 3000, 3100, 3300, 3400, 3600, 3700, 3500, 3400]
total_income = 0
index = 0

while total_income < 30000 and index < len(monthly_income):
    total_income += monthly_income[index]  # Legger til inntekten for den gjeldende måneden
    index += 1                             # Går til neste måned

print(f"Total inntekt nådd: {total_income} er nådd etter {index} måneder.")
```

## Forklaring av eksempelet over

### Definering av variabler:
- **`monthly_income`**: En liste som inneholder månedlig inntekt for 12 måneder.
- **`total_income`**: En variabel som starter på 0, som vil akkumulerer den totale inntekten.
- **`index`**: En variabel som brukes for å spore hvilken måned vi er på i listen.

### While-løkke:
- **`while total_income < 30000 and index < len(monthly_income):`** Løkken fortsetter å kjøre så lenge `total_income` er mindre enn 30000 og `index` er mindre enn lengden på `monthly_income`-listen.

### Inne i løkken:
- **`total_income += monthly_income[index]`**: Legger til inntekten for den gjeldende måneden til `total_income`.
- **`index += 1`**: Øker `index` med 1 for å gå videre til neste måned.

### Utskrift:
- Etter løkken skriver vi ut den totale inntekten som er nådd, og etter hvilken måned.

## Fordeler med `while`-løkker
- **Fleksibilitet**: Du kan styre hvor mange ganger løkken kjører med betingelser, noe som gir høy fleksibilitet.
- **Ubestemt antall iterasjoner**: `while`-løkker er ideelle når antall iterasjoner ikke er kjent på forhånd.

## Komponenter i `while`-løkker

| Komponent   | Beskrivelse                                                  | Eksempel                             |
|-------------|-------------------------------------------------------------|-------------------------------------|
| `while`     | Starter løkken og definerer betingelsen for å fortsette.   | `while total_income < 30000:`      |
| Betingelse  | Uttrykk som evalueres til True eller False.                | `total_income < 30000`             |
| Løkkeblokk  | Koden som kjøres så lenge betingelsen er sann.             | `total_income += monthly_income[index]` |
| `break`     | Avslutter løkken når det ikke er nødvendig å fortsette.     | `if total_income >= 30000: break`  |
| `continue`  | Hopper over resten av løkkens kode for den nåværende iterasjonen. | `continue`                        |

#### Eksempel 11 - Beregning av rente over tid
I dette eksempelet vil vi beregne hvor mye penger vi har etter å ha investert en viss sum penger i en bank med en fast årlig rente over en periode.

```{python}
# Definerer variablene våre

initial_investment = 1000          # Startbeløp
annual_interest_rate = 0.05        # Årlig rente (5%)
years = 0                          # Antall år
total_amount = initial_investment  # Totalbeløp

# Beregn totalbeløp over tid med rente
while years < 10:  # Beregn i 10 år
    total_amount += total_amount * annual_interest_rate  # Legg til rente
    years += 1  # Øk årstallet

print(f"Totalbeløp etter {years} år: {total_amount:.2f} kr")
```

#### Eksempel 12 - Beregn nedbetalingstid for lån
Vi ønsker å lage en funksjon som tar inn tre argumenter: ```loan_amount```, ```annual_interest_rate``` og ```monthly_payment```. Altså, hvor mye du har lånt, hva er den årlige renta og hva du kan betale ned i måneden.

Funksjonen skal beregne hvor mange måneder det vil ta å nedbetale lånet. 

```{python}
def calculate_months_to_pay_off_loan(loan_amount, annual_interest_rate, monthly_payment):
    # Konverterer årlig rente til månedlig rente
    monthly_interest_rate = annual_interest_rate / 12
    months = 0  # Antall måneder

    # Beregn nedbetalingstid vha while-løkke
    while loan_amount > 0:
        # Reduser lånebeløpet med rente og månedlig betaling
        loan_amount += loan_amount * monthly_interest_rate - monthly_payment
        months += 1  # Øk månedstallet

    return months  # Returnerer antall måneder


# Eksempel på bruk
loan = 3000000           # Lånebeløp
interest_rate = 0.054    # Årlig rente (6%)
monthly_payment = 19000  # Månedlig betalingskapasitet

months_needed = calculate_months_to_pay_off_loan(loan, interest_rate, monthly_payment)
print(f"Det tar {months_needed} måneder å nedbetale lånet.")
```

# **Oppgaver**

Under kommer flere oppgaver dere kan jobbe med som tar opp if/else/for/while. Dette er gode forberedelser til eksamen, med å forstå grunnleggende prinsipper i Python.

## Oppgave 1
Les inn csv.-filen, ```'bilparken_ssb.csv'```, som en dataframe ved hjelp av Pandas.


## Oppgave 2 - Skriv ut bilmerker
Lag en for-løkke som skriver ut alle bilmerkene i datasettet.

Hint:
* Du kan få bruk for: ```for index, row in df.iterrows():```


## Oppgave 3 - Total antall biler vraket
Lag en for-løkke som beregner det totale antallet biler vraket mot pant for alle bilmerkene.

Hint:
* Du kan få bruk for: ```for index, row in df.iterrows():```


## Oppgave 4 - Totalt antall biler under 4 år
Lag en for-løkke som summerer antall biler som er under 4 år gamle.


## Oppgave 5 - Populære bilmerker
Lag en if-setning som skriver ut en melding hvis et bilmerke har mer enn 50,000 biler i kategorien "12 - 15 år".

Hint:
* Bruk både for og if.


## Oppgave 6 - Lånebeløp og rente
Lag et program som tar inn et lånebeløp og en rente. Programmet skal skrive ut om lånet er "Lav rente", "Moderat rente" eller "Høy rente".


## Oppgave 7 - Beskatning av inntekt
Skriv et program som beregner beskatningen for en fast inntekt. 

Kriterier:
* Hvis lønn er under 200.000 --> ingen skatt
* Hvis lønna er mellom 200.000 og 300.000 ---> 20% skatt
* Hvis lønna er mellom 300.000 og 550.000 ---> 30% skatt
* Hvis annet, 40% skatt.


## Oppgave 8 - Karakterberegning
Lag en funksjon som tar inn en parameter ```score``` (et tall mellom $0$ og $100$), og gir en karakter etter følgende skala:

* 90 - 100: "Strålende!"
* 75 - 90: "Bra jobba!"
* 50 - 75: "Godkjent."
* Under 50: "Ikke bestått."


## Oppgave 9 - ```while``` og lån
Skriv en funksjon nedbetal_loan som tar inn tre parametere:

* ```loan_amount``` (lånebeløp)
* ```interest_rate``` (årlig rente i prosent)
* ```monthly_payment``` (månedlig beløp som nedbetales).

Funksjonen skal returnere hvor mange måneder det tar å nedbetale lånet, gitt at lånet har en fast månedlig rente som legges til saldoen før hver betaling.


##### [< Forrige](5%20-%20Pandas_og_databehandling.ipynb)     |     [Neste >](7.1%20-%20matplotlib.ipynb)

